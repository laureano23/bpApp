<?php

namespace Mbp\CalidadBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;


/**
 * EstanqueidadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstanqueidadRepository extends EntityRepository
{
	public function addRegistro($reg, $idReg, $validator)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProduccionBundle:Ot');
		
		$encoder = new JsonEncoder();
		$normalizer = new GetSetMethodNormalizer();
		
		
		//Objeto fecha.
		$date = \DateTime::createFromFormat('d/m/Y', $reg['fechaPrueba']);
				
		$callback = function ($dateTime) {
		    return $dateTime instanceof \DateTime
		        ? array('date' => $dateTime->format(\DateTime::ISO8601))
		        : '';
		};
		
		$normalizer->setCallbacks(array('fechaPrueba' => $callback));
		
		$serializer = new Serializer(array($normalizer), array($encoder));
		
		try{
			//Objetos personal
			$soldador = $em->getRepository('MbpPersonalBundle:Personal')->findOneByIdP($reg['idSoldador']);
			$probador = $em->getRepository('MbpPersonalBundle:Personal')->findOneByIdP($reg['idProbador']);
			
			$obj=null;
			if($reg['id'] != 0){			
				//Edita Objeto				
				$obj = $em->getRepository('MbpCalidadBundle:Estanqueidad')->findOneById($idReg);
			}else{			
				//Nuevo Objeto				
				$obj = new Estanqueidad();
			}
			$obj->setfechaPrueba($date)
				->setot($repo->find($reg['ot']))
				->setpresion($reg['presion'])
				->setpruebaNum($reg['pruebaNum'])
				->setestado($reg['estado']) // 0 OK, 1 NO OK, 2 REPARADO
				->setmChapa($reg['mChapa'])
				->setmBagueta($reg['mBagueta'])
				->setmCiba($reg['mCiba'])
				->setmAnulado($reg['mAnulado'])
				->setmPerfil($reg['mPerfil'])
				->setmPisoDesp($reg['mPisoDesp'])
				->setmChapaColectora($reg['mChapaColectora'])
				->settRosca($reg['tRosca'])
				->settPoros($reg['tPoros'])
				->settFijacion($reg['tFijacion'])
				->setTConector($reg['tConector'])
				->setsConector($reg['sConector'])
				->setsTapaPanel($reg['sTapaPanel'])
				->setsPlanchuelas($reg['sPlanchuelas'])
				->setsPuntera($reg['sPuntera'])
				->setMChapaColectora($reg['mChapaColectora'])  
				->setsoldador($soldador)
				->setProbador($probador);						
			
			$errors = $validator->validate($obj);
			if(count($errors) > 0){
				$errList = array();
				foreach ($errors as $error) {
					$errList[$error->getPropertyPath()] = $error->getMessage();
				}
				return array(
					'success' => false,
					'errors' => $errList,
					'tipo' => 'validacion'
				);	
			}
			
			$em->persist($obj);
			$em->flush();
			
			$resp = array();
			$resp['id'] = $obj->getId();
							
			return array(
				'success' => true,
				'data' => $resp
			);
		}catch(\Exception $e){
			return array(
				'success' => false,
				'msg' => $e->getMessage()
			);
		}		
	}
	
	public function listRegistro()
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpCalidadBundle:Estanqueidad');
		try{
			$query = $repo->createQueryBuilder('e')
					->select("e.id,
							DATE_FORMAT(e.fechaPrueba, '%d/%m/%Y') AS fechaPrueba,
							ot.ot,
							e.pruebaNum,
							e.estado,
							e.mChapa,
							e.mBagueta,
							e.mAnulado,
							e.mCiba,
							e.mPerfil,
							e.mPisoDesp,
							e.mChapaColectora,
							e.tRosca,
							e.tPoros,
							e.tFijacion,
							e.sConector,
							e.sTapaPanel,
							e.sPlanchuelas,
							e.sPuntera,
							e.presion,
							s.idP AS idSoldador,
							p.idP AS idProbador							
							")
					->leftJoin('e.soldador', 's')
					->leftJoin('e.probador', 'p')
					->leftJoin('e.ot', 'ot')
					->getQuery()
					->getArrayResult();
			$rec = array();
			$i=0;
			echo json_encode($query);
			
		}catch(\Doctrine\ORM\ORMException $e){
			$this->get('logger')->error($e->getMessage());
		}
	}
	
	public function deleteReg($idReg)
	{
		$em = $this->getEntityManager();
		
		try{
			$reg = $em->getRepository('MbpCalidadBundle:Estanqueidad')->findOneById($idReg);
			
			$em->remove($reg);
			$em->flush();	
			echo json_encode(array(
				'success' => true
			));
		}catch(\Doctrine\ORM\ORMException $e){
			$this->get('logger')->error($e->getMessage());
		}		
	}
    
    public function listData()
    {
        $em = $this->getEntityManager();
        
        try{
            $dql = 'SELECT e.ot, count(e.estado), count(e.mChapa), count(e.mBagueta) FROM MbpCalidadBundle:Estanqueidad e WHERE e.ot = 1';
            $rs = $em->createQuery($dql);
            $reg = $rs->getArrayResult();
            echo json_encode($reg);
        }catch(\Doctrine\ORM\ORMException $e){
            $this->get('logger')->error($e->getMessage());
        }   
    }	
}