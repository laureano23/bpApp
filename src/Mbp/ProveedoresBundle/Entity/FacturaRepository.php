<?php

namespace Mbp\ProveedoresBundle\Entity;

/**
 * FacturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FacturaRepository extends \Doctrine\ORM\EntityRepository
{
	public function listarFacturasCC($idPRov)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProveedoresBundle:Factura');
		
				
		$qb2 = $em->createQueryBuilder()
						->select("	f.id AS idF,
									DATE_FORMAT(f.fechaEmision, '%d-%m-%Y %H:%i:%s') as fechaEmision,
									f.numFc,
									DATE_FORMAT(f.vencimiento, '%d-%m-%Y') AS vencimiento,
									CASE WHEN f.totalFc > 0 THEN f.totalFc ELSE 0 END AS haber,
									CASE WHEN f.totalFc < 0 THEN f.totalFc*-1 ELSE 0 END AS debe,
									CASE WHEN f.esBalance = 0 THEN CONCAT('FACTURA NUM ', f.numFc) ELSE 'BALANCE' END as concepto,
									CASE WHEN f.id > 0 THEN false ELSE false END as detalle,
									CASE WHEN f.id > 0 THEN true ELSE true END as imputado,
									t.id AS idT,
									SUM(t.aplicado) AS valorImputado")
				->from('MbpProveedoresBundle:Factura', 'f')
				->leftJoin('MbpProveedoresBundle:TransaccionOPFC', 't', 'WITH', 't.facturaImputada = f.id')
				->where('f.proveedorId = :provId')								
				->setParameter('provId', $idPRov)
				->groupBy('f.id')		
				->getQuery();
		$res2 = $qb2->getArrayResult();
			
		return $res2;
		
	}
	
	/*
	 * Funcion para obtener el neto de una factura, sumando todos sus impuestos y percepciones
	 * */
	public function getTotalFactura(&$factura)
	{
		$total = $factura->getNeto() + $factura->getNetoNoGrabado() + $factura->getIva21() + $factura->getIva27() + $factura->getIva105() + $factura->getPerIva5() + $factura->getPerIva3() + $factura->getIibbCf();		
		return $total;
	}
	
	/*
	 * Funncio para listar las facturas con la imputacion de pagos que tenga cargada
	 */
	public function listaFacturasImputadas($idProv)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProveedoresBundle:Factura');
		$repoTrans =  $em->getRepository('MbpProveedoresBundle:TransaccionOPFC');
		
		try{
			$qb = $repo->createQueryBuilder('f');
			$query = $qb->select('')
					->where('f.proveedorId = :idProv')
					->setParameter('idProv', $idProv)
					->getQuery();
			$res = $query->getResult();
			
			
			$qb2 = $repoTrans->createQueryBuilder('t');			
			$query2 = $qb2->select('fc.id, SUM(t.aplicado) AS aplicado')
					->join('t.facturaImputada', 'fc')
					->where('fc.proveedorId = :idProv')
					->groupBy('t.facturaImputada')
					->setParameter('idProv',$idProv)
					->getQuery();
			$res2 = $query2->getResult();
			
			$i=0;
			$resp = array();
			foreach ($res as $rec) {
				$resp[$i]['id'] = $rec->getId();				
				$resp[$i]['fechaEmision'] = $rec->getfechaEmision()->format('d-m-Y H:i:s');
				$resp[$i]['concepto'] = "FACTURA NÂ° ".$rec->getNumFc();
				$resp[$i]['numFc'] = $rec->getNumFc();
				$resp[$i]['vencimiento'] = $rec->getvencimiento()->format('d/m/Y');
				$resp[$i]['haber'] = $this->getTotalFactura($rec);								
				$resp[$i]['pendiente'] = 0;
				$i++;
			}
			
			for($i=0; $i<count($res2); $i++){
				for ($j=0; $j < count($res); $j++) { 
					if(array_key_exists($i, $res2) && $res2[$i]['id'] == $res[$j]->getId()){					
						$resp[$j]['valorAplicado'] = $res2[$i]['aplicado'];									
					}
				}
			}
			
			return $resp;
			
		}catch(\Exception $e){
			echo json_encode(array(
				'success' => false,
				'msg' => $e->getMessage()
			));
		}
	}
	
	/*
	 * Busca factura por ID y devuelve todos sus campos en array
	 * */
	public function buscarFcPorId($idF)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProveedoresBundle:Factura');
		
		$qb = $repo->createQueryBuilder('f');			
		$query = $qb->select('f.id, f.fechaCarga, f.fechaEmision, f.tipo, f.sucursal, f.numFc, f.neto, f.netoNoGrabado, f.iva21, f.iva27, f.iva105, f.perIva5, f.perIva3, f.iibbCf, f.vencimiento, f.concepto, f.totalFc, f.imputado, i.id AS tipoGasto')
				->join('f.imputacionGasto', 'i')
				->where('f.id = :idF')
				->setParameter('idF', $idF)
				->getQuery()				
				->getArrayResult();
		
		$query[0]['fechaCarga'] = $query[0]['fechaCarga']->format('d/m/Y');
		$query[0]['fechaEmision'] = $query[0]['fechaEmision']->format('d/m/Y');
		$query[0]['vencimiento'] = $query[0]['vencimiento']->format('d/m/Y');
		
		return $query;
	}
}








