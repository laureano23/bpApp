<?php

namespace Mbp\ProveedoresBundle\Entity;

/**
 * FacturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FacturaRepository extends \Doctrine\ORM\EntityRepository
{
	public function listarFacturasNoAsociadasANC($idPRov)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProveedoresBundle:Factura');		
				
		$qb2 = $em->createQueryBuilder()
						->select("	f.id AS idFcAsociada,
									DATE_FORMAT(f.fechaEmision, '%d/%m/%Y') as emision,
									f.numFc as numero,
									tipo.abreviatura as tipoCbte,
									f.totalFc as importe")
				->from('MbpProveedoresBundle:Factura', 'f')
				->leftJoin('f.tipoId', 'tipo')
				->where('f.proveedorId = :provId')
				->andWhere('tipo.esFactura = true')								
				->setParameter('provId', $idPRov)	
				->orderBy('f.fechaEmision', 'DESC')
				->getQuery();
		$res2 = $qb2->getArrayResult();
			
		return $res2;
		
	}

	public function listarFacturasCC($idPRov)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProveedoresBundle:Factura');
		
				
		$qb2 = $em->createQueryBuilder()
						->select("	f.id AS idF,
									DATE_FORMAT(f.fechaEmision, '%d-%m-%Y %H:%i:%s') as fechaEmision,
									f.numFc,
									DATE_FORMAT(f.vencimiento, '%d-%m-%Y') AS vencimiento,
									CASE WHEN tipo.esNotaCredito = false THEN f.totalFc ELSE 0 END AS haber,
									CASE WHEN tipo.esNotaCredito != false THEN f.totalFc ELSE 0 END AS debe,
									CASE WHEN f.esBalance = 0 THEN CONCAT(tipo.descripcion, '-',f.numFc) ELSE 'BALANCE' END as concepto,
									CASE WHEN f.id > 0 THEN false ELSE false END as detalle,
									CASE WHEN f.id > 0 THEN true ELSE true END as imputado,
									t.id AS idT,
									SUM(t.aplicado) AS valorImputado")
				->from('MbpProveedoresBundle:Factura', 'f')
				->leftJoin('MbpProveedoresBundle:TransaccionOPFC', 't', 'WITH', 't.facturaImputada = f.id')
				->leftJoin('f.tipoId', 'tipo')
				->where('f.proveedorId = :provId')								
				->setParameter('provId', $idPRov)
				->groupBy('f.id')		
				->getQuery();
		$res2 = $qb2->getArrayResult();
			
		return $res2;
		
	}
	
	public function listarCCProveedores($idProveedor)
	{
		$em = $this->getEntityManager();
		$connection = $em->getConnection();
		
		$query = $connection->prepare("
		SELECT sub.concepto, sub.fechaEmision, sub.numFc, sub.vencimiento, SUM(fp2.haber) - SUM(fp2.debe) AS saldo   
				FROM (SELECT 
					f.id as idF,
					DATE_FORMAT(f.fechaEmision, '%d-%m-%Y %H:%i:%s') as fechaEmision,
					f.numFc,
					CONCAT(tipo.descripcion, '-',f.numFc) AS concepto,
					DATE_FORMAT(f.vencimiento, '%d-%m-%Y') AS vencimiento,
					CASE WHEN tipo.esNotaCredito = false THEN f.totalFc ELSE 0 END AS haber,
					CASE WHEN tipo.esNotaCredito != false THEN f.totalFc ELSE 0 END AS debe
				FROM FacturaProveedor as f			
				LEFT JOIN TipoComprobante AS tipo ON f.tipoId = tipo.id
				WHERE f.proveedorId = $idProveedor
				 
				UNION
				
				SELECT
					op.id AS idOP,
					DATE_FORMAT(op.fechaEmision, '%d-%m-%Y %H:%i:%s') as fechaEmision,
					op.id AS numOP,
					CONCAT('ORDEN DE PAGO', '-',op.id) AS concepto,
					DATE_FORMAT(op.fechaEmision, '%d-%m-%Y') AS vencimiento,
					op.importe=0 AS debe,
					op.importe AS haber
				FROM OrdenPago AS op
				WHERE op.proveedorId = $idProveedor
				) AS sub			
			LEFT JOIN FacturaProveedor AS fp2 ON sub.idF >= fp2.id
			GROUP BY idF, fechaEmision, numFc, concepto
			ORDER BY sub.fechaEmision ASC
		");
		
		$query->execute();
		$result = $query->fetchAll();
		
		return $result;
	}
	
	/*
	 * Funcion para obtener el neto de una factura, sumando todos sus impuestos y percepciones
	 * */
	public function getTotalFactura(&$factura)
	{
		$total = $factura->getNeto() + $factura->getNetoNoGrabado() + $factura->getIva21() + $factura->getIva27() + $factura->getIva105() + $factura->getPerIva5() + $factura->getPerIva3() + $factura->getIibbCf();		
		return $total;
	}
	
	/*
	 * Funncio para listar las facturas con la imputacion de pagos que tenga cargada
	 */
	public function listaFacturasImputadas($idProv)
	{
		$em = $this->getEntityManager();
		
		try{
			$sql="
				SELECT * FROM 
					(SELECT 
						fc.id,
						IFNULL(SUM(t.aplicado), 0)+fc.imputado AS valorAplicado,
						DATE_FORMAT(fc.fechaEmision, '%d-%m-%Y') AS fechaEmision,
						fc.numFc AS numFc,
						DATE_FORMAT(fc.vencimiento, '%d-%m-%Y') As vencimiento,
						fc.totalFc AS haber,
						tipo.abreviatura as tipo
					FROM `FacturaProveedor` fc
					LEFT JOIN TransaccionOPFC t ON fc.id = t.facturaId
					LEFT JOIN TipoComprobante tipo ON fc.tipoId = tipo.id
					WHERE fc.proveedorId = $idProv	
						AND tipo.esBalance != 1					
					GROUP BY fc.id, t.facturaId) AS sub
				WHERE sub.valorAplicado < sub.haber
			";
			
			$stmt = $em->getConnection()->prepare($sql);
	    	$stmt->execute();
			$res = $stmt->fetchAll();	
			
			return $res;
			
		}catch(\Exception $e){
			echo json_encode(array(
				'success' => false,
				'msg' => $e->getMessage()
			));
		}
	}
	
	/*
	 * Busca factura por ID y devuelve todos sus campos en array
	 * */
	public function buscarFcPorId($idF)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProveedoresBundle:Factura');
		
		$qb = $repo->createQueryBuilder('f');			
		$query = $qb->select("f.id, 
			DATE_FORMAT(f.fechaCarga, '%d-%m-%Y') AS fechaCarga,
			DATE_FORMAT(f.fechaEmision, '%d-%m-%Y') AS fechaEmision,
			DATE_FORMAT(f.vencimiento, '%d-%m-%Y') AS vencimiento,
			t.id AS tipo, f.sucursal,
			f.numFc, f.neto, f.netoNoGrabado,
			f.iva21,
			f.iva27,
			f.iva105,
			f.perIva5,
			f.perIva3,
			f.iibbCf,
			f.iibbBsas,
			f.iibbOtras,
			f.concepto,
			f.totalFc,
			f.imputado,
			i.id AS tipoGasto")
				->leftJoin('f.imputacionGasto', 'i')
				->leftJoin('f.tipoId', 't')
				->where('f.id = :idF')
				->setParameter('idF', $idF)
				->getQuery()				
				->getArrayResult();
		
		return $query;
	}
}








