<?php

namespace Mbp\ProduccionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BrazingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BrazingRepository extends EntityRepository
{
	public function readBrazingParamas($data)
	{
		$em = $this->getEntityManager();
		
		try{
			if(!$data){
				$dql = 'SELECT b FROM MbpProduccionBundle:Brazing b WHERE b.id = 1';
				$q = $em->createQuery($dql);
				$res = $q->getArrayResult();
				
				echo json_encode(array(
					'data' => $res,
					'success' => true
				));
			}else{
					if($data == 'Liviana'){
					$dql = 'SELECT b FROM MbpProduccionBundle:Brazing b WHERE b.tipoCarga = 0';
					$q = $em->createQuery($dql);
					$res = $q->getArrayResult();
					
					echo json_encode(array(
						'data' => $res,
						'success' => true
					));
				}else{
					$dql = 'SELECT b FROM MbpProduccionBundle:Brazing b WHERE b.tipoCarga = 1';
					$q = $em->createQuery($dql);
					$res = $q->getArrayResult();
					
					echo json_encode(array(
						'data' => $res,
						'success' => true
					));
				}
			}	
		}catch(\Doctrine\ORM\ORMException $e){
			$this->get('logger')->error($e->getMessage());
		}		
	}
	
	public function updateBrazingParam($data)
	{
		$em = $this->getEntityManager();
		$repo = $em->getRepository('MbpProduccionBundle:Brazing');
		$carga='';
		
		//Paso el tipo de carga a booleano
		$data->tipoCarga = 'Liviana' ? $carga = 0 : $carga = 1;
		
		
		try{
			$obj = $repo->findOneByTipoCarga($carga);
			
			//Objetos de tiempo
			$intervalo = new \DateTime($data->intervalos);
			$tiempoCarga = new \DateTime($data->tiempoCarga);
					
			$obj->setCiclos($data->ciclos);
			$obj->setIntervalos($intervalo);
			$obj->setTclEnfSup($data->tclEnfSup);
			$obj->setTclPurgaInf($data->tclPurgaInf);
			$obj->setTclEnfInf($data->tclEnfInf);
			$obj->setTclPurgaSup($data->tclPurgaSup);
			$obj->setTPrecalentado($data->tPrecalentado);
			$obj->setCaudalPrecamara($data->caudalPrecamara);
			$obj->setCaudalHorno($data->caudalHorno);
			$obj->setTiempoCarga($tiempoCarga);
			
			$em->persist($obj);
			$em->flush();
			
			echo json_encode(array(
				'success' => true
			));
			
		}catch(\Doctrine\ORM\ORMException $e){
			$this->get('logger')->error($e->getMessage());
		}
	}
}












